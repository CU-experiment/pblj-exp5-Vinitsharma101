Question 1. Write a Java program to calculate the sum of a list of integers using autoboxing and unboxing. Include methods to parse strings into their respective wrapper classes (e.g., Integer.parseInt()). CODE: import java.util.*;

public class AutoboxingExample { public static void main(String[] args) { List stringNumbers = Arrays.asList("10", "20", "30", "40", "50"); List intNumbers = parseStringToIntList(stringNumbers); int sum = calculateSum(intNumbers);

    System.out.println("Sum of numbers: " + sum);
}
public static List<Integer> parseStringToIntList(List<String> stringNumbers) {
    List<Integer> intList = new ArrayList<>();
    for (String num : stringNumbers) {
        intList.add(Integer.parseInt(num)); 
    }
    return intList;
}
public static int calculateSum(List<Integer> numbers) {
    int sum = 0;
    for (Integer num : numbers) {
        sum += num; 
    }
    return sum;
}
}

QUESTION 2. Create a Java program to serialize and deserialize a Student object. The program should: Serialize a Student object (containing id, name, and GPA) and save it to a file. Deserialize the object from the file and display the student details. Handle FileNotFoundException, IOException, and ClassNotFoundException using exception handling CODE: import java.io.*;

class Student implements Serializable { private static final long serialVersionUID = 1L; private int id; private String name; private double gpa;

public Student(int id, String name, double gpa) {
    this.id = id;
    this.name = name;
    this.gpa = gpa;
}
public String toString() {
    return "Student{id=" + id + ", name='" + name + "', gpa=" + gpa + "}";
}
} public class StudentSerialization { private static final String FILE_NAME = "student.ser";

public static void main(String[] args) {
    Student student = new Student(1, "John Doe", 3.8);
    try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
        oos.writeObject(student);
    } catch (IOException e) {
        System.err.println("Serialization Error: " + e.getMessage());
    }
    
    try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
        System.out.println("Deserialized Student: " + (Student) ois.readObject());
    } catch (IOException | ClassNotFoundException e) {
        System.err.println("Deserialization Error: " + e.getMessage());
    }
}
}

QUESTION3. Create a menu-based Java application with the following options. 1.Add an Employee 2. Display All 3. Exit If option 1 is selected, the application should gather details of the employee like employee name, employee id, designation and salary and store it in a file. If option 2 is selected, the application should display all the employee details. If option 3 is selected the application should exit. CODE: import java.io.; import java.util.;

class Employee implements Serializable { private static final long serialVersionUID = 1L; private int id; private String name; private String designation; private double salary;

public Employee(int id, String name, String designation, double salary) {
    this.id = id;
    this.name = name;
    this.designation = designation;
    this.salary = salary;
}
@Override
public String toString() {
    return "Employee ID: " + id + ", Name: " + name + ", Designation: " + designation + ", Salary: " + salary;
}
}

public class EmployeeManagement { private static final String FILE_NAME = "employees.ser"; private static List employees = new ArrayList<>();

public static void main(String[] args) {
    loadEmployees();
    Scanner scanner = new Scanner(System.in);
    while (true) {
        System.out.println("1. Add an Employee\n2. Display All\n3. Exit");
        int choice = scanner.nextInt();
        scanner.nextLine();
        switch (choice) {
            case 1 -> addEmployee(scanner);
            case 2 -> displayEmployees();
            case 3 -> {
                saveEmployees();
                System.out.println("Exiting...");
                return;
            }
            default -> System.out.println("Invalid choice. Try again.");
        }
    }
}

private static void addEmployee(Scanner scanner) {
    System.out.print("Enter Employee ID: ");
    int id = scanner.nextInt();
    scanner.nextLine();
    System.out.print("Enter Name: ");
    String name = scanner.nextLine();
    System.out.print("Enter Designation: ");
    String designation = scanner.nextLine();
    System.out.print("Enter Salary: ");
    double salary = scanner.nextDouble();
    scanner.nextLine();
    employees.add(new Employee(id, name, designation, salary));
    saveEmployees();
}
private static void displayEmployees() {
    if (employees.isEmpty()) {
        System.out.println("No employees found.");
    } else {
        employees.forEach(System.out::println);
    }
}
private static void saveEmployees() {
    try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
        oos.writeObject(employees);
    } catch (IOException e) {
        System.err.println("Error saving employees: " + e.getMessage());
    }
}
private static void loadEmployees() {
    try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
        employees = (List<Employee>) ois.readObject();
    } catch (FileNotFoundException e) {
        employees = new ArrayList<>();
    } catch (IOException | ClassNotFoundException e) {
        System.err.println("Error loading employees: " + e.getMessage());
    }
}
}
